<Modal @ref="modal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Tipo de recursos</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Field>
                    <FieldLabel>Nombre:</FieldLabel>
                    <Validation Validator="Helper.IsTrimmedNotEmpty">
                        <TextEdit @ref="nameEdit" MaxLength="100" @bind-Text="name" />
                    </Validation>
                </Field>
                <Field>
                    <FieldLabel>URL de imagen:</FieldLabel>
                    <TextEdit MaxLength="800" @bind-Text="imageSource" />
                </Field>
                <Field>
                    <FieldLabel>Grupo de usuarios:</FieldLabel>
                    <Select2 TItem="UserGroup" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="userGroups" @bind-SelectedItem="userGroup" Nullable="true" />
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="Submit">Enviar</Button>
            <Button Color="Color.Secondary" Clicked="Close">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public AppDbContext Service { get; set; }

    [Parameter]
    public EventCallback Submitted { get; set; }

    string name;
    TextEdit nameEdit;
    string imageSource;
    List<UserGroup> userGroups;
    UserGroup userGroup;
    Modal modal;
    Validations validations;

    public async Task Show(ResourceType type)
    {
        name = type.Name;
        imageSource = type.ImageSource;
        userGroups = await Service.UserGroups.OrderBy(userGroup => userGroup.Name).ToListAsync();
        userGroup = type.UserGroup;

        validations.ClearAll();
        modal.Show();

        nameEdit.Focus();
    }

    public void Get(ResourceType type)
    {
        type.Name = name;
        type.ImageSource = imageSource;
        type.UserGroup = userGroup;
    }

    private async Task Submit()
    {
        if (!validations.ValidateAll())
        {
            return;
        }

        modal.Hide();
        await Submitted.InvokeAsync(null);
    }

    private void Close()
    {
        modal.Hide();
    }
}
