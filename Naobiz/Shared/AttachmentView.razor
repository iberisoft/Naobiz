@implements IDisposable

<Field>
    <FileEdit Multiple="true" Changed="UploadFiles" Progressed="UploadProgressed" />
    <FieldHelp>Cuota máxima es @AttachmentModel.SizeQuota MB por cada archivo</FieldHelp>
</Field>

@foreach (var model in models)
{
    <Row>
        <Column>
            <Tooltip Text="@Helper.SizeToString(model.Size)" Placement="Placement.Right" Fade="true" Inline="true">
                <Badge Color="Color.Light">@model.Name</Badge>
                <CloseButton Clicked="() => Remove(model)" />
            </Tooltip>
        </Column>
        <Column>
            @if (model.SizeExceedsQuota)
            {
                <Badge Color="Color.Warning">Cuota máxima excedida</Badge>
            }
            else
            {
                <Progress>
                    <ProgressBar Value="model.Progress" />
                </Progress>
            }
        </Column>
    </Row>
}

@code {
    List<AttachmentModel> models = new List<AttachmentModel>();
    List<AttachmentModel> oldModels = new List<AttachmentModel>();

    public void LoadAttachments(IEnumerable<Attachment> attachments)
    {
        models = attachments.Select(attachment => new AttachmentModel(attachment.Name, attachment.Size)).OrderBy(model => model.Name).ToList();
        oldModels = models.ToList();
        StateHasChanged();
    }

    public void Dispose()
    {
        foreach (var model in models)
        {
            model.Dispose();
        }
    }

    private async Task UploadFiles(FileChangedEventArgs e)
    {
        var newModels = e.Files.Where(file => !models.Any(model => model.Name == file.Name)).Select(file => new AttachmentModel(file)).ToList();
        models.AddRange(newModels);
        foreach (var model in newModels.Where(model => !model.SizeExceedsQuota))
        {
            await model.UploadAsync();
        }
    }

    private void UploadProgressed(FileProgressedEventArgs e)
    {
        var model = models.SingleOrDefault(model => model.Name == e.File.Name);
        if (model != null)
        {
            model.Progress = (int)e.Percentage;
        }
    }

    private void Remove(AttachmentModel model)
    {
        models.Remove(model);
    }

    public bool AllAttachmentsUploaded => models.Except(oldModels).Where(model => !model.SizeExceedsQuota).All(model => model.Uploaded);

    public IEnumerable<T> CreateAttachments<T>()
        where T : Attachment, new()
    {
        foreach (var model in models.Except(oldModels).Where(model => !model.SizeExceedsQuota && model.Uploaded))
        {
            var attachment = new T();
            attachment.Name = model.Name;
            attachment.Size = model.Size;
            attachment.Content = new Blob();
            attachment.Content.Data = model.Data.ToArray();
            yield return attachment;
        }
    }

    public IEnumerable<AttachmentModel> RemovedModels => oldModels.Except(models);
}
