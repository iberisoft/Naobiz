@inject UserService UserService

<Modal @ref="modal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Recurso</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Row>
                    <Column>
                        <Field>
                            <FieldLabel>Proprietario:</FieldLabel>
                            <SelectEdit2 TItem="User" KeyGetter="item => item.Id" TextGetter="item => item.NameWithCompany" Items="owners" @bind-SelectedItem="owner"
                                         IsDisabled="currentUser?.Admin != true" />
                        </Field>
                    </Column>
                    <Column>
                        <Field>
                            <FieldLabel>Actividad:</FieldLabel>
                            <SelectEdit2 TItem="Activity" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="activities" @bind-SelectedItem="activity" />
                        </Field>
                    </Column>
                </Row>
                <Field>
                    <FieldLabel>Título:</FieldLabel>
                    <Validation Validator="Helper.IsTrimmedNotEmpty">
                        <TextEdit @ref="titleEdit" MaxLength="100" @bind-Text="title" />
                    </Validation>
                    <FieldHelp>100 símbolos máximo</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>Descripción:</FieldLabel>
                    <Validation Validator="Helper.IsTrimmedNotEmpty">
                        <MemoEdit MaxLength="800" Rows="4" @bind-Text="description" />
                    </Validation>
                    <FieldHelp>800 símbolos máximo</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>Sitio web:</FieldLabel>
                    <Validation Validator="Helper.IsUrl">
                        <TextEdit MaxLength="800" @bind-Text="url" />
                    </Validation>
                </Field>
                <AttachmentView @ref="attachmentView" />
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="Submit">Enviar</Button>
            <Button Color="Color.Secondary" Clicked="Close">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public AppDbContext Service { get; set; }

    [Parameter]
    public EventCallback Submitted { get; set; }

    User currentUser;
    List<User> owners;
    User owner;
    List<Activity> activities;
    Activity activity;
    string title;
    TextEdit titleEdit;
    string description;
    string url;
    Modal modal;
    Validations validations;
    AttachmentView attachmentView;

    public async Task Show(Resource resource)
    {
        currentUser = await UserService.GetCurrentAsync(Service);

        owners = await Service.Users.OrderBy(user => user.Name).ThenBy(user => user.Company).ToListAsync();
        owner = resource.Owner ?? currentUser;
        activities = await Service.Activities.ToListAsync();
        activity = resource.Activity ?? activities.First();
        title = resource.Title;
        description = resource.Description;
        url = resource.Url;
        attachmentView.LoadAttachments(await Service.ResourceAttachments.Where(attachment => attachment.Resource == resource).ToListAsync());

        validations.ClearAll();
        modal.Show();

        titleEdit.Focus();
    }

    public void Get(Resource resource)
    {
        resource.Owner = owner;
        resource.Activity = activity;
        resource.Title = title?.Trim();
        resource.Description = description?.Trim();
        resource.Url = url?.Trim();
    }

    private async Task Submit()
    {
        if (!validations.ValidateAll() || !attachmentView.AllAttachmentsUploaded)
        {
            return;
        }

        modal.Hide();
        await Submitted.InvokeAsync(null);
    }

    private void Close()
    {
        modal.Hide();
    }

    public IEnumerable<ResourceAttachment> CreateAttachments() => attachmentView.CreateAttachments<ResourceAttachment>();

    public IEnumerable<AttachmentModel> RemovedModels => attachmentView.RemovedModels;
}
