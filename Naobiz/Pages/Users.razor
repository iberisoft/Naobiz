@page "/users"

@inherits AuthorizedBase
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject EmailService EmailService
@inject TerritoryService TerritoryService

@if (models == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Panel Class="page-users">
    <Heading Size="HeadingSize.Is1">Usuarios: @models.Count</Heading>

    <Row>
        <Column>
            <Field>
                <FieldLabel>Grupo:</FieldLabel>
                <Select2 TItem="UserGroup" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="groups" SelectedItem="groupFilter" SelectedItemChanged="ChangeGroupFilter"
                         Nullable="true" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Email:</FieldLabel>
                <SearchTextEdit @ref="@emailFilterEdit" Text="@emailFilter" TextChanged="ChangeEmailFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Nombre/empresa:</FieldLabel>
                <SearchTextEdit Text="@nameFilter" TextChanged="ChangeNameFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Actividad:</FieldLabel>
                <Select2 TItem="Activity" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="activities" SelectedItem="activityFilter" SelectedItemChanged="ChangeActivityFilter"
                         Nullable="true" />
            </Field>
        </Column>
    </Row>
    <Row>
        <Column>
            <Field>
                <FieldLabel>NIF:</FieldLabel>
                <SearchTextEdit Text="@taxIdFilter" TextChanged="ChangeTaxIdFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Teléfono:</FieldLabel>
                <SearchTextEdit Text="@phoneFilter" TextChanged="ChangePhoneFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Dirección/código postal/municipio:</FieldLabel>
                <SearchTextEdit Text="@addressFilter" TextChanged="ChangeAddressFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Provincia:</FieldLabel>
                <Select TValue="string" SelectedValue="provinceFilter" SelectedValueChanged="ChangeProvinceFilter">
                    <TerritoryList Territories="TerritoryService.Provinces" Nullable="true" />
                </Select>
            </Field>
        </Column>
    </Row>
    <Row>
        <Column>
            <Button Color="Color.Info" Outline="true" Margin="Margin.Is1.FromBottom" Clicked="ExportUsers">Exportar</Button>
        </Column>
        <Column>
            <Alert Color="Color.Warning" Visible="alertMessage != null">@alertMessage</Alert>
        </Column>
    </Row>

    <Panel Class="overflow-auto" Margin="Margin.Is0.OnX">
        <Table Striped="true">
            <TableHeader ThemeContrast="ThemeContrast.Light">
                <TableRow>
                    <TableHeaderCell></TableHeaderCell>
                    <TableHeaderCell>
                        <Dropdown>
                            <DropdownToggle>
                                <strong>Grupo</strong>
                            </DropdownToggle>
                            <DropdownMenu>
                                @foreach (var group in groups)
                                {
                                    <DropdownItem Clicked="() => SetGroupToSelectedUsers(group.Id != 0 ? group : null)">@group.Name</DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </TableHeaderCell>
                    <TableHeaderCell>Email</TableHeaderCell>
                    <TableHeaderCell>Darse de alta</TableHeaderCell>
                    <TableHeaderCell>Nombre</TableHeaderCell>
                    <TableHeaderCell>Empresa</TableHeaderCell>
                    <TableHeaderCell>NIF</TableHeaderCell>
                    <TableHeaderCell>Teléfono</TableHeaderCell>
                    <TableHeaderCell>Dirección</TableHeaderCell>
                    <TableHeaderCell>Código postal</TableHeaderCell>
                    <TableHeaderCell>Municipio</TableHeaderCell>
                    <TableHeaderCell>Provincia</TableHeaderCell>
                    <TableHeaderCell>País</TableHeaderCell>
                    <TableHeaderCell>Recibir información</TableHeaderCell>
                    <TableHeaderCell>Último acceso</TableHeaderCell>
                    <TableHeaderCell>Dirección IP</TableHeaderCell>
                    <TableHeaderCell>Admin</TableHeaderCell>
                    <TableHeaderCell>Pagado</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var model in models)
                {
                    var user = model.Value;
                    <TableRow>
                        <TableRowCell>
                            <Check @bind-Checked="model.Selected" />
                        </TableRowCell>
                        <TableRowCell>@user.Group?.Name</TableRowCell>
                        <TableRowCell>@user.Email</TableRowCell>
                        <TableRowCell>@user.RegistrationDateTime.ToShortDateString()</TableRowCell>
                        <TableRowCell>@user.Name</TableRowCell>
                        <TableRowCell>@user.Company</TableRowCell>
                        <TableRowCell>@user.TaxId</TableRowCell>
                        <TableRowCell>@user.Phone</TableRowCell>
                        <TableRowCell>@user.Address</TableRowCell>
                        <TableRowCell>@user.ZipCode</TableRowCell>
                        <TableRowCell>@user.City</TableRowCell>
                        <TableRowCell>@TerritoryService.GetProvinceName(user.Province)</TableRowCell>
                        <TableRowCell>@TerritoryService.GetCountryName(user.Country)</TableRowCell>
                        <TableRowCell>
                            @if (user.InfoRequested)
                            {
                                <Icon Name="IconNameEx.Check" />
                            }
                        </TableRowCell>
                        <TableRowCell>@user.LoginDateTime</TableRowCell>
                        <TableRowCell>@user.LoginIpAddress</TableRowCell>
                        <TableRowCell>
                            @if (user.Admin)
                            {
                                <Icon Name="IconNameEx.Check" />
                            }
                        </TableRowCell>
                        <TableRowCell>
                            @if (user.Paid)
                            {
                                <Icon Name="IconNameEx.Check" />
                            }
                        </TableRowCell>
                        <TableRowCell>
                            <Dropdown>
                                <DropdownToggle>...</DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem Clicked="async () => await EditUser(user)">Editar</DropdownItem>
                                    @if (user.ActivationCode != null)
                                    {
                                        <DropdownItem Clicked="() => SendActivationToUser(user)">Enviar activación</DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    </Panel>

    <UserEdit @ref="userEdit" Service="Service" Submitted="SubmitUser" />
    <Confirm @ref="sendActivationToUserConfirm" Text="Enviar correo para activar la cuenta?" Confirmed="SendActivationToUser" />
</Panel>

@code {
    List<SelectedValue<User>> models;
    List<UserGroup> groups;
    UserGroup groupFilter;
    string emailFilter;
    SearchTextEdit emailFilterEdit;
    string nameFilter;
    List<Activity> activities;
    Activity activityFilter;
    string taxIdFilter;
    string phoneFilter;
    string addressFilter;
    string provinceFilter;
    User activeUser;
    UserEdit userEdit;
    Confirm sendActivationToUserConfirm;
    string alertMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var currentUser = await UserService.GetCurrentAsync(Service);
        if (currentUser == null || !currentUser.Admin)
        {
            return;
        }

        groups = await Service.UserGroups.OrderBy(group => group.Name).ToListAsync();
        groups.Add(new UserGroup { Name = "Ninguno" });
        activities = await Service.Activities.ToListAsync();
        await UpdateUsers();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (emailFilterEdit != null)
        {
            emailFilterEdit.Focus();
            emailFilterEdit = null;
        }
    }

    private async Task UpdateUsers()
    {
        var userQuery = Service.Users.AsQueryable();
        if (groupFilter != null)
        {
            userQuery = userQuery.Where(user => user.Group == (groupFilter.Id != 0 ? groupFilter : null));
        }
        if (!string.IsNullOrEmpty(emailFilter))
        {
            userQuery = userQuery.Where(user => user.Email.Contains(emailFilter));
        }
        if (!string.IsNullOrEmpty(nameFilter))
        {
            userQuery = userQuery.Where(user => user.Name.Contains(nameFilter) || user.Company.Contains(nameFilter));
        }
        if (activityFilter != null)
        {
            userQuery = userQuery.Where(user => Service.GetUsers(activityFilter).Contains(user));
        }
        if (!string.IsNullOrEmpty(taxIdFilter))
        {
            userQuery = userQuery.Where(user => user.TaxId.Contains(taxIdFilter));
        }
        if (!string.IsNullOrEmpty(phoneFilter))
        {
            userQuery = userQuery.Where(user => user.Phone.Contains(phoneFilter));
        }
        if (!string.IsNullOrEmpty(addressFilter))
        {
            userQuery = userQuery.Where(user => user.Address.Contains(addressFilter) || user.ZipCode.Contains(addressFilter) || user.City.Contains(addressFilter));
        }
        if (provinceFilter != null)
        {
            userQuery = userQuery.Where(user => user.Province == provinceFilter);
        }
        userQuery = userQuery.OrderBy(user => user.Group).ThenBy(user => user.Email);
        models = SelectedValue<User>.Create(await userQuery.ToListAsync(), SelectedUsers).ToList();
    }

    private async Task ChangeGroupFilter(UserGroup value)
    {
        groupFilter = value;
        await UpdateUsers();
    }

    private async Task ChangeEmailFilter(string value)
    {
        emailFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeNameFilter(string value)
    {
        nameFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeActivityFilter(Activity value)
    {
        activityFilter = value;
        await UpdateUsers();
    }

    private async Task ChangeTaxIdFilter(string value)
    {
        taxIdFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangePhoneFilter(string value)
    {
        phoneFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeAddressFilter(string value)
    {
        addressFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeProvinceFilter(string value)
    {
        provinceFilter = value;
        await UpdateUsers();
    }

    private IEnumerable<User> SelectedUsers => SelectedValue<User>.GetSelectedValues(models);

    private async Task SetGroupToSelectedUsers(UserGroup group)
    {
        foreach (var user in SelectedUsers)
        {
            user.Group = group;
        }
        await Service.SaveChangesAsync();
    }

    private async Task EditUser(User user)
    {
        activeUser = user;
        await userEdit.Show(activeUser);
    }

    private void SendActivationToUser(User user)
    {
        activeUser = user;
        sendActivationToUserConfirm.Show();
    }

    private async Task SubmitUser()
    {
        userEdit.Get(activeUser);

        await Service.SaveChangesAsync();

        await UpdateUsers();
    }

    private void SendActivationToUser()
    {
        alertMessage = "Enviando correo...";

        Task.Run(async () =>
        {
            if (await EmailService.SendAsync(activeUser, "Activar la cuenta", "activate.cshtml", new Models.Emails.ActivateModel()))
            {
                alertMessage = $"El correo para activar la cuenta se ha enviado a {activeUser.Email}";
            }
            else
            {
                alertMessage = "Hay error al enviar el correo para activar la cuenta";
            }
            await InvokeAsync(StateHasChanged);
        });
    }

    private void ExportUsers() => NavigationManager.NavigateTo("_users", true);
}
