@page "/users"

@inherits AuthorizedBase
@inject UserService UserService
@inject TerritoryService TerritoryService

<Heading Size="HeadingSize.Is1">Users: @models?.Count</Heading>

@if (models == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Row>
    <Column>
        <Field>
            <FieldLabel>Group:</FieldLabel>
            <SelectEdit2 TItem="UserGroup" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="groups" SelectedItem="groupFilter" SelectedItemChanged="ChangeGroupFilter"
                         IsNullable="true" />
        </Field>
    </Column>
    <Column>
        <Field>
            <FieldLabel>Email:</FieldLabel>
            <TextEdit @ref="@emailFilterEdit" Text="@emailFilter" TextChanged="ChangeEmailFilter" />
        </Field>
    </Column>
    <Column>
        <Field>
            <FieldLabel>Name:</FieldLabel>
            <TextEdit Text="@nameFilter" TextChanged="ChangeNameFilter" />
        </Field>
    </Column>
</Row>
<Row>
    <Column>
        <Field>
            <FieldLabel>Tax ID:</FieldLabel>
            <TextEdit Text="@taxIdFilter" TextChanged="ChangeTaxIdFilter" />
        </Field>
    </Column>
    <Column>
        <Field>
            <FieldLabel>Phone:</FieldLabel>
            <TextEdit Text="@phoneFilter" TextChanged="ChangePhoneFilter" />
        </Field>
    </Column>
    <Column>
        <Field>
            <FieldLabel>Address/ZIP Code/City:</FieldLabel>
            <TextEdit Text="@addressFilter" TextChanged="ChangeAddressFilter" />
        </Field>
    </Column>
    <Column>
        <Field>
            <FieldLabel>Province:</FieldLabel>
            <SelectEdit TValue="string" SelectedValue="provinceFilter" SelectedValueChanged="ChangeProvinceFilter">
                <TerritoryList Territories="TerritoryService.Provinces" IsNullable="true" />
            </SelectEdit>
        </Field>
    </Column>
</Row>

<Panel Class="overflow-auto" Margin="Margin.Is0.OnX">
    <Table IsStriped="true">
        <TableHeader ThemeContrast="ThemeContrast.Light">
            <TableRow>
                <TableHeaderCell></TableHeaderCell>
                <TableHeaderCell>
                    <Dropdown>
                        <DropdownToggle>
                            <strong>Group</strong>
                        </DropdownToggle>
                        <DropdownMenu>
                            @foreach (var group in groups)
                            {
                                <DropdownItem Clicked="() => SetGroupToSelectedUsers(group)">@group.Name</DropdownItem>
                            }
                            <DropdownDivider />
                            <DropdownItem Clicked="() => SetGroupToSelectedUsers(null)">None</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </TableHeaderCell>
                <TableHeaderCell>Email</TableHeaderCell>
                <TableHeaderCell>Registered</TableHeaderCell>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Tax ID</TableHeaderCell>
                <TableHeaderCell>Phone</TableHeaderCell>
                <TableHeaderCell>Address</TableHeaderCell>
                <TableHeaderCell>ZIP Code</TableHeaderCell>
                <TableHeaderCell>City</TableHeaderCell>
                <TableHeaderCell>Province</TableHeaderCell>
                <TableHeaderCell>Country</TableHeaderCell>
                <TableHeaderCell>Info Requested</TableHeaderCell>
                <TableHeaderCell>Last Login</TableHeaderCell>
                <TableHeaderCell>IP Address</TableHeaderCell>
                <TableHeaderCell>Admin</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var model in models)
            {
                var user = model.Value;
                <TableRow>
                    <TableRowCell>
                        <CheckEdit @bind-Checked="model.Selected" />
                    </TableRowCell>
                    <TableRowCell>@user.Group?.Name</TableRowCell>
                    <TableRowCell>@user.Email</TableRowCell>
                    <TableRowCell>@user.RegistrationDateTime.ToShortDateString()</TableRowCell>
                    <TableRowCell>@user.Name</TableRowCell>
                    <TableRowCell>@user.TaxId</TableRowCell>
                    <TableRowCell>@user.Phone</TableRowCell>
                    <TableRowCell>@user.Address</TableRowCell>
                    <TableRowCell>@user.ZipCode</TableRowCell>
                    <TableRowCell>@user.City</TableRowCell>
                    <TableRowCell>@TerritoryService.GetProvinceName(user.Province)</TableRowCell>
                    <TableRowCell>@TerritoryService.GetCountryName(user.Country)</TableRowCell>
                    <TableRowCell>
                        @if (user.InfoRequested)
                        {
                            <Icon Name="IconNameEx.Check" />
                        }
                    </TableRowCell>
                    <TableRowCell>@user.LoginDateTime</TableRowCell>
                    <TableRowCell>@user.LoginIpAddress</TableRowCell>
                    <TableRowCell>
                        @if (user.Admin)
                        {
                            <Icon Name="IconNameEx.Check" />
                        }
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
</Panel>

@code {
    List<SelectedValue<User>> models;
    List<UserGroup> groups;
    UserGroup groupFilter;
    string emailFilter;
    TextEdit emailFilterEdit;
    string nameFilter;
    string taxIdFilter;
    string phoneFilter;
    string addressFilter;
    string provinceFilter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await UserService.GetCurrentAsync(Service);
        if (user == null || !user.Admin)
        {
            return;
        }

        groups = await Service.UserGroups.OrderBy(group => group.Name).ToListAsync();
        await UpdateUsers();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            emailFilterEdit?.Focus();
        }
    }

    private async Task UpdateUsers()
    {
        var userQuery = Service.Users.AsQueryable();
        if (groupFilter != null)
        {
            userQuery = userQuery.Where(user => user.Group == groupFilter);
        }
        if (!string.IsNullOrEmpty(emailFilter))
        {
            userQuery = userQuery.Where(user => user.Email.Contains(emailFilter));
        }
        if (!string.IsNullOrEmpty(nameFilter))
        {
            userQuery = userQuery.Where(user => user.Name.Contains(nameFilter));
        }
        if (!string.IsNullOrEmpty(taxIdFilter))
        {
            userQuery = userQuery.Where(user => user.TaxId.Contains(taxIdFilter));
        }
        if (!string.IsNullOrEmpty(phoneFilter))
        {
            userQuery = userQuery.Where(user => user.Phone.Contains(phoneFilter));
        }
        if (!string.IsNullOrEmpty(addressFilter))
        {
            userQuery = userQuery.Where(user => user.Address.Contains(addressFilter) || user.ZipCode.Contains(addressFilter) || user.City.Contains(addressFilter));
        }
        if (provinceFilter != null)
        {
            userQuery = userQuery.Where(user => user.Province == provinceFilter);
        }
        userQuery = userQuery.OrderBy(user => user.Group).ThenBy(user => user.Email);
        models = SelectedValue<User>.Create(await userQuery.ToListAsync(), SelectedUsers).ToList();
    }

    private async Task ChangeGroupFilter(UserGroup value)
    {
        groupFilter = value;
        await UpdateUsers();
    }

    private async Task ChangeEmailFilter(string value)
    {
        emailFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeNameFilter(string value)
    {
        nameFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeTaxIdFilter(string value)
    {
        taxIdFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangePhoneFilter(string value)
    {
        phoneFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeAddressFilter(string value)
    {
        addressFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeProvinceFilter(string value)
    {
        provinceFilter = value;
        await UpdateUsers();
    }

    private IEnumerable<User> SelectedUsers => SelectedValue<User>.GetSelectedValues(models);

    private async Task SetGroupToSelectedUsers(UserGroup group)
    {
        foreach (var user in SelectedUsers)
        {
            user.Group = group;
        }
        await Service.SaveChangesAsync();
    }
}
