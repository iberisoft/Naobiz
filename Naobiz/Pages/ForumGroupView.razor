@page "/forum/{groupid:int}"

@inherits OwningComponentBase<AppDbContext>
@inject UserService UserService

@if (group == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Panel Class="page-forum-group">
    <Heading Size="HeadingSize.Is1">@group.Name: @topics?.Count</Heading>

    <Row>
        <Column>
            <Field>
                <FieldLabel>Title/Message:</FieldLabel>
                <SearchTextEdit @ref="keywordFilterEdit" Text="@keywordFilter" TextChanged="ChangeKeywordFilter" />
            </Field>
        </Column>
    </Row>
    <Row Margin="Margin.Is1.FromBottom">
        <Column>
            @if (user != null)
            {
                <Button Color="Color.Primary" Clicked="CreateTopic">New Topic</Button>
            }
        </Column>
    </Row>

    @foreach (var topic in topics)
    {
        <ForumTopicView @key="topic.Id" TopicId="topic.Id" TopicDeleted="OnTopicDeleted" />
    }

    @if (user != null)
    {
        <ForumMessageEdit @ref="newTopicEdit" IsTitleVisible="true" Submitted="SendTopic" />
    }
</Panel>

@code {
    [Parameter]
    public int GroupId { get; set; }

    User user;
    ForumGroup group;
    string keywordFilter;
    SearchTextEdit keywordFilterEdit;
    List<ForumTopic> topics;
    ForumTopic newTopic;
    ForumMessageEdit newTopicEdit;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentAsync(Service);

        group = await Service.GetForumGroups(user).SingleAsync(group => group.Id == GroupId);
        await UpdateTopics();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (keywordFilterEdit != null)
        {
            keywordFilterEdit.Focus();
            keywordFilterEdit = null;
        }
    }

    private async Task UpdateTopics()
    {
        var topicQuery = Service.ForumTopics.Where(topic => topic.Group == group);
        if (keywordFilter != null)
        {
            foreach (var keyword in keywordFilter.Split((char[])null, StringSplitOptions.RemoveEmptyEntries))
            {
                topicQuery = topicQuery.Where(topic => topic.Title.Contains(keyword) || topic.Message.Text.Contains(keyword));
            }
        }
        topicQuery = topicQuery.OrderByDescending(topic => topic.Message.CreationDateTime);
        topics = await topicQuery.ToListAsync();
    }

    private async Task CreateTopic()
    {
        newTopic = new ForumTopic();
        newTopic.Group = group;
        newTopic.Message = new ForumMessage();
        await newTopicEdit.Show();
    }

    private async Task SendTopic()
    {
        newTopic.Message.Initialize(user);
        newTopicEdit.Get(newTopic);
        Service.ForumTopics.Add(newTopic);
        Service.ForumMessages.Add(newTopic.Message);

        foreach (var attachment in newTopicEdit.CreateAttachments())
        {
            attachment.Message = newTopic.Message;
            Service.ForumAttachments.Add(attachment);
            Service.Blobs.Add(attachment.Content);
        }

        await Service.SaveChangesAsync();

        keywordFilter = null;
        await UpdateTopics();
    }

    private async Task ChangeKeywordFilter(string value)
    {
        keywordFilter = value;
        await UpdateTopics();
    }

    private async Task OnTopicDeleted()
    {
        await UpdateTopics();
        StateHasChanged();
    }
}
