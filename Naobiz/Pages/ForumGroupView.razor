@page "/forum/{groupid:int}"

@inherits AuthorizedBase
@inject UserService UserService

@if (group == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Heading Size="HeadingSize.Is1">@group.Name</Heading>

<Row Margin="Margin.Is1.FromBottom">
    <Column ColumnSize="ColumnSize.Is10">
        <TextEdit Text="@topicFilter" TextChanged="ChangeTopicFilter" />
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Button Color="Color.Primary" Float="Float.Right" Clicked="CreateTopic">New Topic</Button>
    </Column>
</Row>

@foreach (var topic in topics)
{
    <ForumTopicView @key="topic.Id" TopicId="topic.Id" TopicDeleted="OnTopicDeleted" />
}

<ForumMessageEdit @ref="newTopicEdit" IsTitleVisible="true" Submitted="SendTopic" />

@code {
    [Parameter]
    public int GroupId { get; set; }

    User user;
    ForumGroup group;
    string topicFilter;
    List<ForumTopic> topics;
    ForumTopic newTopic;
    ForumMessageEdit newTopicEdit;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        user = await UserService.GetCurrentAsync(Service);
        if (user == null)
        {
            return;
        }

        group = await Service.ForumGroups.SingleAsync(group => group.Id == GroupId);
        await UpdateTopics();
    }

    private async Task UpdateTopics()
    {
        var topicQuery = Service.ForumTopics.Where(topic => topic.Group == group);
        if (!string.IsNullOrEmpty(topicFilter))
        {
            foreach (var keyword in topicFilter.Split((char[])null, StringSplitOptions.RemoveEmptyEntries))
            {
                topicQuery = topicQuery.Where(topic => topic.Title.Contains(keyword) || topic.Message.Text.Contains(keyword));
            }
        }
        topicQuery = topicQuery.OrderByDescending(topic => topic.Message.CreationDateTime);
        topics = await topicQuery.ToListAsync();
    }

    private void CreateTopic()
    {
        newTopic = new ForumTopic();
        newTopic.Group = group;
        newTopic.Message = new ForumMessage();
        newTopic.Message.Initialize(user);
        newTopicEdit.Show();
    }

    private async Task SendTopic()
    {
        newTopicEdit.Get(newTopic);
        Service.ForumTopics.Add(newTopic);
        Service.ForumMessages.Add(newTopic.Message);

        foreach (var attachment in newTopicEdit.CreateAttachments())
        {
            attachment.Message = newTopic.Message;
            Service.ForumAttachments.Add(attachment);
            Service.Blobs.Add(attachment.Content);
        }

        await Service.SaveChangesAsync();

        topicFilter = null;
        await UpdateTopics();
    }

    private async Task ChangeTopicFilter(string value)
    {
        topicFilter = value;
        await UpdateTopics();
    }

    private async Task OnTopicDeleted()
    {
        await UpdateTopics();
        StateHasChanged();
    }
}
