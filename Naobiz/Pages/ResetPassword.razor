@page "/reset-password"

@inherits OwningComponentBase<AppDbContext>
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">Restablecer contraseña</Heading>

@if (user != null)
{
    <Row>
        <Column ColumnSize="ColumnSize.IsThird.IsThird.WithOffset">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Field>
                    <FieldLabel>Email:</FieldLabel>
                    <TextEdit IsReadonly="true" Text="@user.Email" />
                </Field>
                <Field>
                    <FieldLabel>Contraseña:</FieldLabel>
                    <Validation Validator="Helper.IsPasswordValid">
                        <TextEdit MaxLength="100" Role="TextRole.Password" @bind-Text="password" />
                    </Validation>
                    <FieldHelp>@Helper.PasswordRuleDescription</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>Confirmar contraseña:</FieldLabel>
                    <Validation Validator="e => Helper.IsPasswordConfirmed(e, password)">
                        <TextEdit MaxLength="100" Role="TextRole.Password">
                            <Feedback>
                                <ValidationError>La contraseña y su confirmación no coinciden</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    <Button Color="Color.Primary" Clicked="SubmitChanges">Enviar</Button>
                </Field>
            </Validations>
        </Column>
    </Row>
}
else
{
    <Paragraph>La cuenta no se ha encontrado o ya está procesada.</Paragraph>
}

@code {
    User user;
    string password;
    Validations validations;

    public string Email { get; set; }

    public string Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.ParseQueryString(this);

        if (Code != null)
        {
            user = await Service.Users.SingleOrDefaultAsync(user => user.Email == Email && user.PasswordResetCode == Code);
        }
    }

    private async Task SubmitChanges()
    {
        if (!validations.ValidateAll())
        {
            return;
        }

        user.SetPassword(password);
        user.PasswordResetCode = null;
        await Service.SaveChangesAsync();

        var uri = "login";
        uri = QueryHelpers.AddQueryString(uri, "email", user.Email);
        NavigationManager.NavigateTo(uri);
    }
}
