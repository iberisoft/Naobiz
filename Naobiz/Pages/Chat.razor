@page "/chat"

@inherits AuthorizedBase
@implements IDisposable
@inject UserService UserService
@inject ChatService ChatService
@inject EmailService EmailService
@inject TerritoryService TerritoryService

@if (users == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Panel Class="page-chat">
    <Heading Size="HeadingSize.Is1">Chat</Heading>

    <Row>
        <Column>
            <Field>
                <FieldLabel>Nombre:</FieldLabel>
                <SearchTextEdit Text="@nameFilter" TextChanged="ChangeNameFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Actividad:</FieldLabel>
                <SelectEdit2 TItem="Activity" KeyGetter="item => item.Id" TextGetter="item => item.Name" Items="activities" SelectedItem="activityFilter" SelectedItemChanged="ChangeActivityFilter"
                             IsNullable="true" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Municipio:</FieldLabel>
                <SearchTextEdit Text="@addressFilter" TextChanged="ChangeAddressFilter" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Provincia:</FieldLabel>
                <SelectEdit TValue="string" SelectedValue="provinceFilter" SelectedValueChanged="ChangeProvinceFilter">
                    <TerritoryList Territories="TerritoryService.Provinces" IsNullable="true" />
                </SelectEdit>
            </Field>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.Is3">
            @foreach (var user in users)
            {
                <Card Margin="Margin.Is1.FromBottom">
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is8">
                                <UserInfo User="user" />
                            </Column>
                            <Column ColumnSize="ColumnSize.Is4">
                                <Button Color="Color.Info" IsOutline="true" Size="ButtonSize.Small" Clicked="async () => await StartChat(user)">
                                    <Icon Name="IconNameEx.Comments" />
                                </Button>
                            </Column>
                        </Row>
                    </CardBody>
                </Card>
            }
        </Column>
        @if (messages != null)
        {
            <Column ColumnSize="ColumnSize.Is9">
                <Addons Margin="Margin.Is3.FromBottom">
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @ref="newMessageTextEdit" MaxLength="100" @bind-Text="newMessageText" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="SendMessage">Enviar</Button>
                    </Addon>
                </Addons>
                @foreach (var message in messages)
                {
                    <Row>
                        <Column>
                            <UserInfo User="message.Creator" />
                            <Timestamp DateTime="message.CreationDateTime" Float="Float.Right" />
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Alert Color="Color.Info" IsShow="true">@message.Text</Alert>
                        </Column>
                    </Row>
                }
            </Column>
        }
    </Row>
</Panel>

@code {
    User currentUser;
    string nameFilter;
    List<Activity> activities;
    Activity activityFilter;
    string addressFilter;
    string provinceFilter;
    List<User> users;
    User chattingUser;
    List<ChatMessage> messages;
    string newMessageText;
    TextEdit newMessageTextEdit;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        currentUser = await UserService.GetCurrentAsync(Service);
        if (currentUser == null)
        {
            return;
        }

        activities = await Service.Activities.ToListAsync();
        await UpdateUsers();

        ChatService.MessageSent += ChartService_MessageSent;
    }

    public void Dispose()
    {
        ChatService.MessageSent -= ChartService_MessageSent;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        newMessageTextEdit?.Focus();
    }

    private async Task UpdateUsers()
    {
        var userQuery = Service.Users.AsQueryable();
        if (!string.IsNullOrEmpty(nameFilter))
        {
            userQuery = userQuery.Where(user => user.Name.Contains(nameFilter));
        }
        if (activityFilter != null)
        {
            userQuery = userQuery.Where(user => Service.GetUsers(activityFilter).Contains(user));
        }
        if (!string.IsNullOrEmpty(addressFilter))
        {
            userQuery = userQuery.Where(user => user.City.Contains(addressFilter));
        }
        if (provinceFilter != null)
        {
            userQuery = userQuery.Where(user => user.Province == provinceFilter);
        }
        if (userQuery is DbSet<User>)
        {
            var recipientQuery = Service.ChatMessages.Where(message => message.Creator == currentUser).Select(message => message.Recipient).Distinct();
            var creatorQuery = Service.ChatMessages.Where(message => message.Recipient == currentUser).Select(message => message.Creator).Distinct();
            userQuery = recipientQuery.Union(creatorQuery);
        }
        userQuery = userQuery.OrderBy(user => user.Name);
        users = await userQuery.ToListAsync();
        users.Remove(currentUser);

        await StartChat(null);
    }

    private async Task ChangeNameFilter(string value)
    {
        nameFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeActivityFilter(Activity value)
    {
        activityFilter = value;
        await UpdateUsers();
    }

    private async Task ChangeAddressFilter(string value)
    {
        addressFilter = value?.Trim();
        await UpdateUsers();
    }

    private async Task ChangeProvinceFilter(string value)
    {
        provinceFilter = value;
        await UpdateUsers();
    }

    private async Task StartChat(User user)
    {
        chattingUser = user;
        await UpdateMessages();
    }

    private async Task UpdateMessages()
    {
        messages = chattingUser != null ? await Service.ChatMessages
            .Where(message => message.Creator == currentUser && message.Recipient == chattingUser || message.Creator == chattingUser && message.Recipient == currentUser)
            .OrderByDescending(message => message.CreationDateTime)
            .ToListAsync() : null;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessageText))
        {
            return;
        }

        var message = new ChatMessage();
        message.Initialize(currentUser, chattingUser);
        message.Text = newMessageText.Trim();
        Service.ChatMessages.Add(message);

        await Service.SaveChangesAsync();

        newMessageText = null;
        await UpdateMessages();

        newMessageTextEdit.Focus();

        if (!ChatService.SendMessage(message) && chattingUser.NotifyChat)
        {
            StateHasChanged();
            await EmailService.SendAsync(chattingUser, "Mensaje del chat", "chat-message.cshtml", new Models.Emails.ChatMessageModel(message));
        }
    }

    private void ChartService_MessageSent(object _, ChatService.MessageEventArgs e)
    {
        if (e.RecipientId == currentUser.Id && e.CreatorId == chattingUser?.Id)
        {
            Task.Run(async () =>
            {
                await UpdateMessages();
                await InvokeAsync(StateHasChanged);
            });
            e.Delivered = true;
        }
    }
}
