@page "/register"

@inherits OwningComponentBase<AppDbContext>
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject EmailService EmailService
@inject TerritoryService TerritoryService

<Heading Size="HeadingSize.Is1">Darse de alta</Heading>

@if (model == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Validations @ref="validations" Mode="ValidationMode.Manual">
    <Row>
        <Column>
            <Field>
                <FieldLabel>Email:</FieldLabel>
                <Validation Validator="ValidationRule.IsEmail">
                    <TextEdit @ref="emailEdit" MaxLength="254" @bind-Text="email" />
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Contraseña:</FieldLabel>
                <Validation Validator="Helper.IsPasswordValid">
                    <TextEdit MaxLength="100" Role="TextRole.Password" @bind-Text="password" />
                </Validation>
                <FieldHelp>@Helper.PasswordRuleDescription</FieldHelp>
            </Field>
            <Field>
                <FieldLabel>Confirmar contraseña:</FieldLabel>
                <Validation Validator="e => Helper.IsPasswordConfirmed(e, password)">
                    <TextEdit MaxLength="100" Role="TextRole.Password">
                        <Feedback>
                            <ValidationError>La contraseña y su confirmación no coinciden</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Código de grupo:</FieldLabel>
                <TextEdit MaxLength="20" @bind-Text="groupCode" />
                <FieldHelp>Sólo para comunidades y colectivos</FieldHelp>
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Nombre:</FieldLabel>
                <Validation Validator="Helper.IsTrimmedNotEmpty">
                    <TextEdit MaxLength="100" @bind-Text="model.Name" />
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Empresa:</FieldLabel>
                <Validation Validator="Helper.IsAny">
                    <TextEdit MaxLength="100" @bind-Text="model.Company" />
                </Validation>
            </Field>
            <Field>
                <FieldLabel>NIF:</FieldLabel>
                <Validation UsePattern="true">
                    <TextEdit MaxLength="9" Pattern="^(|\w{9})$" @bind-Text="model.TaxId">
                        <Feedback>
                            <ValidationError>Debe ser 9 letras/números o vacío</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Teléfono:</FieldLabel>
                <Validation UsePattern="true">
                    <TextEdit MaxLength="20" Pattern="^\+?(\d|\s)*$" @bind-Text="model.Phone">
                        <ValidationError>Debe ser números/espacios (se puede poner + al principio)</ValidationError>
                    </TextEdit>
                </Validation>
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Dirección:</FieldLabel>
                <Validation Validator="Helper.IsAny">
                    <TextEdit MaxLength="100" @bind-Text="model.Address" />
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Código postal:</FieldLabel>
                <Validation UsePattern="true">
                    <TextEdit MaxLength="5" Pattern="^(|\d{5})$" @bind-Text="model.ZipCode">
                        <Feedback>
                            <ValidationError>Debe ser 5 números o vacío</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Municipio:</FieldLabel>
                <Validation Validator="Helper.IsTrimmedNotEmpty">
                    <TextEdit MaxLength="100" @bind-Text="model.City" />
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Provincia:</FieldLabel>
                <SelectEdit @bind-SelectedValue="model.Province">
                    <TerritoryList Territories="TerritoryService.Provinces" IsNullable="true" />
                </SelectEdit>
            </Field>
            <Field>
                <FieldLabel>País:</FieldLabel>
                <SelectEdit @bind-SelectedValue="model.Country">
                    <TerritoryList Territories="TerritoryService.Countries" />
                </SelectEdit>
            </Field>
        </Column>
    </Row>
    <Row>
        <Column>
            <Field>
                <Validation Validator="Helper.IsTrue">
                    <CheckEdit>
                        <ChildContent>Acepto la información legal y política de cookies de Naobiz</ChildContent>
                        <Feedback>
                            <ValidationError>Por favor acepte</ValidationError>
                        </Feedback>
                    </CheckEdit>
                </Validation>
            </Field>
            <Field>
                <CheckEdit @bind-Checked="model.InfoRequested">Estoy de acuerdo en recibir información de Naobiz vía email</CheckEdit>
            </Field>
            <Field>
                <Button Color="Color.Primary" Clicked="SubmitChanges">Enviar</Button>
            </Field>
            <Alert Color="Color.Warning" IsShow="alertMessage != null">@alertMessage</Alert>
        </Column>
    </Row>
</Validations>

@code {
    string email;
    TextEdit emailEdit;
    string password;
    string groupCode;
    readonly AccountModel model = new AccountModel();
    string alertMessage;
    Validations validations;

    protected override void OnAfterRender(bool firstRender)
    {
        if (emailEdit != null)
        {
            emailEdit.Focus();
            emailEdit = null;
        }
    }

    private async Task SubmitChanges()
    {
        if (!validations.ValidateAll())
        {
            return;
        }

        var user = await Service.Users.SingleOrDefaultAsync(user => user.Email == email);
        if (user == null)
        {
            user = new User();
            user.Initialize(Environment.IsDevelopment());
            user.Email = email;
            user.SetPassword(password);
            if (groupCode != null)
            {
                user.Group = Service.UserGroups.FirstOrDefault(group => group.Code == groupCode);
            }
            model.CopyTo(user);

            if (user.ActivationCode == null)
            {
                user.Admin = true;
                Service.Users.Add(user);
                await Service.SaveChangesAsync();

                NavigationManager.NavigateTo("login");
                return;
            }

            alertMessage = "Enviando correo...";
            StateHasChanged();

            if (await EmailService.SendAsync(user, "Activar la cuenta", "activate.cshtml", new Models.Emails.ActivateModel()))
            {
                Service.Users.Add(user);
                await Service.SaveChangesAsync();

                alertMessage = $"El correo para activar la cuenta se ha enviado a {user.Email}";
            }
            else
            {
                alertMessage = "Hay error al enviar el correo para activar la cuenta";
            }
        }
        else
        {
            alertMessage = "Este email ya existe";
        }
    }
}
