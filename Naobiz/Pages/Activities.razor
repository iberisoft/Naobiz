@page "/activities"

@inherits AuthorizedBase
@inject NavigationManager NavigationManager
@inject UserService UserService

@if (models == null)
{
    <Paragraph>Loading...</Paragraph>
    return;
}

<Panel Class="page-activities">
    <Heading Size="HeadingSize.Is1">Actividades</Heading>

    <Row>
        <Column>
            @foreach (var model in models.Take(models.Count / 2))
            {
                <Field>
                    <Check @bind-Checked="model.Selected">@model.Value.Name</Check>
                </Field>
            }
        </Column>
        <Column>
            @foreach (var model in models.Skip(models.Count / 2))
            {
                <Field>
                    <Check @bind-Checked="model.Selected">@model.Value.Name</Check>
                </Field>
            }
        </Column>
    </Row>
    <Row>
        <Column>
            <Button Color="Color.Primary" Clicked="SubmitChanges">Enviar</Button>
        </Column>
    </Row>
</Panel>

@code {
    User currentUser;
    List<SelectedValue<Activity>> models;
    List<Activity> selectedActivities;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        currentUser = await UserService.GetCurrentAsync(Service);
        if (currentUser == null)
        {
            return;
        }

        selectedActivities = await Service.GetActivities(currentUser).ToListAsync();
        models = SelectedValue<Activity>.Create(await Service.Activities.ToListAsync(), selectedActivities).ToList();
    }

    private async Task SubmitChanges()
    {
        foreach (var model in models)
        {
            if (model.Selected)
            {
                if (!selectedActivities.Contains(model.Value))
                {
                    Service.AddActivity(currentUser, model.Value);
                }
            }
            else
            {
                if (selectedActivities.Contains(model.Value))
                {
                    await Service.RemovevActivityAsync(currentUser, model.Value);
                }
            }
        }
        await Service.SaveChangesAsync();

        NavigationManager.NavigateTo("");
    }
}
